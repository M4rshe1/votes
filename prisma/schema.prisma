generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum VoteField {
  UPVOTE
  DOWNVOTE
  NEUTRAL
}

model User {
  id            String         @id @unique @default(cuid())
  email         String         @unique
  name          String?
  role          Role           @default(USER)
  ownedVotes    VoteOwner[]
  userVoteItems UserVoteItem[]
}

model VoteOwner {
  id     String @id @unique @default(cuid())
  userId String
  voteId String
  vote   Vote   @relation(fields: [voteId], references: [id])
  user   User   @relation(fields: [userId], references: [id])
}

model Vote {
  id               String         @id @unique @default(cuid())
  code             String         @unique
  title            String
  description      String?
  usersCanAddItems Boolean        @default(false)
  votesAllowed     Int            @default(0)
  voteItems        VoteItem[]
  userVoteItems    UserVoteItem[]
  isClosed         Boolean        @default(false)
  endDate          DateTime?
  createdAt        DateTime       @default(now())
  voteOwner        VoteOwner[]
  upVotesOnly      Boolean        @default(false)
}

model VoteItem {
  id            String         @id @unique @default(cuid())
  title         String
  description   String?
  gmaps         String?
  vote          Vote           @relation(fields: [voteId], references: [id], onDelete: Cascade)
  voteId        String
  userVoteItems UserVoteItem[]
}

model UserVoteItem {
  id         String    @id @unique @default(cuid())
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  voteItem   VoteItem  @relation(fields: [voteItemId], references: [id], onDelete: Cascade)
  voteItemId String
  vote       Vote      @relation(fields: [voteId], references: [id], onDelete: Cascade)
  voteId     String
  voteType   VoteField @default(NEUTRAL)
}
